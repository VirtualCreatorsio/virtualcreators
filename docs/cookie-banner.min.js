(function() {
'use strict';
console.log('ðŸª Cookie Banner Script Loading...');
const CookieManager = {
cookiesEnabled: true, // Track if cookies work
set: function(name, value, days) {
if (!this.cookiesEnabled) {
return false;
}
try {
const expires = new Date();
expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires.toUTCString()}; path=/; SameSite=Lax`;
return true;
} catch (e) {
return false;
}
},
get: function(name) {
if (!this.cookiesEnabled) {
return null;
}
try {
const nameEQ = name + "=";
const ca = document.cookie.split(';');
for (let i = 0; i < ca.length; i++) {
let c = ca[i].trim();
if (c.indexOf(nameEQ) === 0) {
const value = decodeURIComponent(c.substring(nameEQ.length, c.length));
return value;
}
}
return null;
} catch (e) {
return null;
}
},
delete: function(name) {
if (!this.cookiesEnabled) {
return false;
}
try {
document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=Lax`;
return true;
} catch (e) {
return false;
}
},
exists: function(name) {
return this.get(name) !== null;
}
};
const CookieConsent = {
init: function() {
console.log('ðŸš€ Initializing Cookie Banner...');
console.log('ðŸ“„ Document ready state:', document.readyState);
console.log('ðŸŒ Current URL:', window.location.href);
const cookieSupport = this.testCookieSupport();
if (!cookieSupport) {
CookieManager.cookiesEnabled = false;
}
this.createBanner();
this.checkConsent();
},
testCookieSupport: function() {
try {
CookieManager.set('test_cookie', 'test', 1);
const testResult = CookieManager.get('test_cookie');
CookieManager.delete('test_cookie');
const isSupported = testResult === 'test';
return isSupported;
} catch (e) {
return false;
}
},
createBanner: function() {
console.log('ðŸ—ï¸ Creating banner HTML...');
const bannerHTML = `
<div class="cookie-banner" id="cookieBanner" style="display: none;">
<div class="cookie-banner-content">
<div class="cookie-banner-text">
<h4 class="cookie-banner-title" data-translate="cookieBannerTitle">We use cookies to enhance your experience</h4>
<p class="cookie-banner-description" data-translate="cookieBannerDescription">This website uses cookies to improve your browsing experience and analyze site traffic. By continuing to use our site, you consent to our use of cookies.</p>
</div>
<div class="cookie-banner-actions">
<button class="btn btn-ghost btn-small" onclick="CookieConsent.openModal()" data-translate="cookieManageBtn">Manage Cookies</button>
<button class="btn btn-primary btn-small" onclick="CookieConsent.acceptAll()" data-translate="cookieAcceptBtn">Accept All</button>
</div>
</div>
</div>
<div class="cookie-modal" id="cookieModal" style="display: none;">
<div class="modal-content">
<div class="modal-header">
<h3 class="modal-title" data-translate="cookieSettingsTitle">Cookie Settings</h3>
<button class="modal-close" onclick="CookieConsent.closeModal()">
<svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
<path d="M18 6L6 18"/>
<path d="M6 6L18 18"/>
</svg>
</button>
</div>
<div class="modal-body">
<div class="cookie-category">
<div class="cookie-category-header">
<h4 data-translate="cookieEssentialTitle">Essential Cookies</h4>
<div class="cookie-toggle">
<input type="checkbox" id="essential-cookies" checked disabled>
<label for="essential-cookies" class="toggle-label">
<span class="toggle-switch"></span>
</label>
</div>
</div>
<p class="cookie-category-description" data-translate="cookieEssentialDescription">These cookies are necessary for the website to function and cannot be disabled.</p>
</div>
<div class="cookie-category">
<div class="cookie-category-header">
<h4 data-translate="cookieAnalyticsTitle">Analytics Cookies</h4>
<div class="cookie-toggle">
<input type="checkbox" id="analytics-cookies">
<label for="analytics-cookies" class="toggle-label">
<span class="toggle-switch"></span>
</label>
</div>
</div>
<p class="cookie-category-description" data-translate="cookieAnalyticsDescription">These cookies help us understand how visitors interact with our website by collecting and reporting information anonymously.</p>
</div>
</div>
<div class="modal-footer">
<button class="btn btn-ghost" onclick="CookieConsent.rejectNonEssential()" data-translate="cookieRejectBtn">Reject Non-Essential</button>
<button class="btn btn-primary" onclick="CookieConsent.savePreferences()" data-translate="cookieSaveBtn">Save Preferences</button>
</div>
</div>
</div>
`;
try {
document.body.insertAdjacentHTML('afterbegin', bannerHTML);
console.log('âœ… Banner HTML inserted into body');
} catch (e) {
console.error('âŒ Failed to insert banner HTML:', e);
return;
}
this.banner = document.getElementById('cookieBanner');
this.modal = document.getElementById('cookieModal');
if (!this.banner) {
console.error('âŒ Could not find banner element after creation');
return;
}
if (!this.modal) {
console.error('âŒ Could not find modal element after creation');
return;
}
this.modal.addEventListener('click', (e) => {
if (e.target === this.modal) {
this.closeModal();
}
});
if (typeof window.t === 'function') {
this.updateTranslations();
}
console.log('âœ… Cookie banner HTML created and inserted');
console.log('ðŸŽ¯ Banner element:', this.banner);
console.log('ðŸŽ¯ Modal element:', this.modal);
},
updateTranslations: function() {
console.log('ðŸŒ Updating cookie banner translations...');
const cookieBanner = document.getElementById('cookieBanner');
const cookieModal = document.getElementById('cookieModal');
[cookieBanner, cookieModal].forEach(container => {
if (container) {
container.querySelectorAll("[data-translate]").forEach((element) => {
const key = element.getAttribute("data-translate");
if (typeof window.t === 'function') {
const translation = window.t(key);
if (translation && translation !== key) {
element.textContent = translation;
}
}
});
}
});
},
checkConsent: function() {
let consent = null;
if (!CookieManager.cookiesEnabled) {
try {
const sessionConsent = sessionStorage.getItem('cookie_consent');
if (sessionConsent) {
const parsedConsent = JSON.parse(sessionConsent);
this.applyConsent(parsedConsent);
return; // Don't show banner
}
} catch (e) {
console.error('âŒ Error reading sessionStorage:', e);
}
this.showBanner();
return;
}
consent = CookieManager.get('cookie_consent');
console.log('ðŸ” Checking consent:', consent);
if (!consent) {
console.log('ðŸ“£ No consent cookie found, showing banner');
this.showBanner();
return;
}
if (consent === 'null' || consent === '' || consent === 'undefined') {
console.log('âš ï¸ Invalid consent cookie found, showing banner');
CookieManager.delete('cookie_consent');
this.showBanner();
return;
}
try {
const parsedConsent = JSON.parse(consent);
console.log('âœ… Valid consent found:', parsedConsent);
this.applyConsent(parsedConsent);
} catch (e) {
console.error('âŒ Error parsing consent cookie:', e);
console.log('ðŸ”§ Clearing invalid consent cookie and showing banner');
CookieManager.delete('cookie_consent');
this.showBanner();
}
},
showBanner: function() {
if (!this.banner) {
console.error('âŒ Cannot show banner - element not found');
return;
}
console.log('ðŸŽ‰ Showing cookie banner');
console.log('ðŸ“ Banner current styles:', {
display: this.banner.style.display,
visibility: getComputedStyle(this.banner).visibility,
opacity: getComputedStyle(this.banner).opacity,
transform: getComputedStyle(this.banner).transform
});
this.banner.style.display = 'block';
setTimeout(() => {
this.banner.classList.add('show');
console.log('âœ¨ Banner show class added');
console.log('ðŸ“ Banner updated styles:', {
display: this.banner.style.display,
visibility: getComputedStyle(this.banner).visibility,
opacity: getComputedStyle(this.banner).opacity,
transform: getComputedStyle(this.banner).transform
});
}, 100);
},
hideBanner: function() {
if (!this.banner) {
console.error('âŒ Cannot hide banner - element not found');
return;
}
console.log('ðŸ‘‹ Hiding cookie banner');
this.banner.classList.remove('show');
setTimeout(() => {
this.banner.style.display = 'none';
console.log('âœ… Banner hidden');
}, 400);
},
openModal: function() {
if (!this.modal) {
console.error('âŒ Cannot open modal - element not found');
return;
}
console.log('ðŸ”“ Opening cookie modal');
this.modal.style.display = 'flex';
setTimeout(() => {
this.modal.classList.add('show');
}, 10);
document.body.style.overflow = 'hidden';
},
closeModal: function() {
if (!this.modal) {
console.error('âŒ Cannot close modal - element not found');
return;
}
console.log('ðŸ”’ Closing cookie modal');
this.modal.classList.remove('show');
setTimeout(() => {
this.modal.style.display = 'none';
document.body.style.overflow = '';
}, 300);
},
acceptAll: function() {
const consent = {
essential: true,
analytics: true,
timestamp: new Date().toISOString()
};
console.log('âœ… Accepting all cookies:', consent);
if (this.saveConsent(consent)) {
this.applyConsent(consent);
this.hideBanner();
}
},
rejectNonEssential: function() {
const consent = {
essential: true,
analytics: false,
timestamp: new Date().toISOString()
};
console.log('âŒ Rejecting non-essential cookies:', consent);
if (this.saveConsent(consent)) {
this.applyConsent(consent);
this.closeModal();
this.hideBanner();
}
},
savePreferences: function() {
const analyticsCheckbox = document.getElementById('analytics-cookies');
const consent = {
essential: true,
analytics: analyticsCheckbox ? analyticsCheckbox.checked : false,
timestamp: new Date().toISOString()
};
console.log('ðŸ’¾ Saving preferences:', consent);
if (this.saveConsent(consent)) {
this.applyConsent(consent);
this.closeModal();
this.hideBanner();
}
},
saveConsent: function(consent) {
try {
const consentString = JSON.stringify(consent);
if (!CookieManager.cookiesEnabled) {
sessionStorage.setItem('cookie_consent', consentString);
return true;
}
const saved = CookieManager.set('cookie_consent', consentString, 365);
if (!saved) {
console.error('âŒ Failed to save cookie consent');
return false;
}
const verification = CookieManager.get('cookie_consent');
if (!verification) {
console.error('âŒ Cookie consent verification failed');
return false;
}
console.log('âœ… Cookie consent saved successfully');
return true;
} catch (e) {
console.error('âŒ Error saving consent:', e);
return false;
}
},
applyConsent: function(consent) {
console.log('âš™ï¸ Applying consent:', consent);
if (consent.analytics) {
this.loadAnalytics();
} else {
this.removeAnalyticsCookies();
}
},
loadAnalytics: function() {
console.log('ðŸ“Š Analytics cookies accepted - loading analytics');
},
removeAnalyticsCookies: function() {
const analyticsCookies = ['_ga', '_gid', '_gat', '_gtag'];
analyticsCookies.forEach(cookie => {
CookieManager.delete(cookie);
});
console.log('ðŸ§¹ Analytics cookies removed');
},
clearConsent: function() {
if (!CookieManager.cookiesEnabled) {
sessionStorage.removeItem('cookie_consent');
} else {
CookieManager.delete('cookie_consent');
}
console.log('ðŸ—‘ï¸ Cookie consent cleared');
this.checkConsent();
}
};
window.CookieConsent = CookieConsent;
window.updateCookieBannerTranslations = function() {
if (CookieConsent.updateTranslations) {
CookieConsent.updateTranslations();
}
};
window.clearCookieConsent = function() {
CookieConsent.clearConsent();
};
window.testShowBanner = function() {
console.log('ðŸ§ª TEST: Force showing banner');
if (CookieConsent.banner) {
CookieConsent.showBanner();
} else {
console.error('âŒ Banner not available for test');
}
};
function initializeCookieBanner() {
console.log('ðŸŽ¬ Initializing Cookie Banner - DOM Ready');
CookieConsent.init();
}
if (document.readyState === 'loading') {
console.log('ðŸ“‹ Document still loading, adding DOMContentLoaded listener');
document.addEventListener('DOMContentLoaded', initializeCookieBanner);
} else {
console.log('ðŸ“‹ Document already ready, initializing immediately');
initializeCookieBanner();
}
window.addEventListener('load', function() {
if (!window.CookieConsent.banner) {
console.log('ðŸ”„ Fallback initialization triggered');
initializeCookieBanner();
} else {
console.log('âœ… Cookie banner already initialized');
}
});
setTimeout(function() {
if (!window.CookieConsent.banner) {
console.log('â° Timeout fallback initialization triggered');
initializeCookieBanner();
}
}, 2000);
console.log('ðŸª Cookie Banner Script Loaded');
})();
